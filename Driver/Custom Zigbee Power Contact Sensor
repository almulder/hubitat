metadata {
    definition(name: "Custom Zigbee Power Contact Sensor", namespace: "almulder", author: "Albert Mulder") {
        capability "Contact Sensor"
        capability "Battery"
        capability "Configuration"
        capability "Refresh"
        capability "Tamper Alert"
        capability "Temperature Measurement"

        attribute "powerStatus", "enum", ["off", "on"]

        fingerprint profileId: "0104", deviceId: "0107", inClusters: "0000,0001,0003,0020,0402,0500,0B05", outClusters: "0019", model: "URC4460BC0-X-R", manufacturer: "Universal Electronics Inc"
    }

    preferences {
        input name: "debugLogging", type: "bool", title: "Enable debug logging", defaultValue: true
    }
}

def parse(String description) {
    if (debugLogging) log.debug "Parsing message: $description"
    
    def event = zigbee.getEvent(description)
    if (event) {
        if (debugLogging) log.debug "Parsed event: $event"
        handleEvent(event, description)
    } else {
        if (description?.startsWith("zone status")) {
            def status = zigbee.parseZoneStatus(description)
            if (status.isAlarm1Set()) {
                if (debugLogging) log.debug "Power state: off"
                handleEvent([name: "powerStatus", value: "off"], description)
            } else {
                if (debugLogging) log.debug "Power state: on"
                handleEvent([name: "powerStatus", value: "on"], description)
            }
            if (status.isTamperSet()) {
                if (debugLogging) log.debug "Tamper state: detected"
                handleEvent([name: "tamper", value: "detected"], description)
            } else {
                if (debugLogging) log.debug "Tamper state: clear"
                handleEvent([name: "tamper", value: "clear"], description)
            }
        } else {
            def map = zigbee.parseDescriptionAsMap(description)
            if (debugLogging) log.debug "Parsed map: $map"

            if (map.clusterInt == 0x0500 && map.attrInt == 0x0002) {
                def powerState = map.value == "01" ? "off" : "on"
                if (debugLogging) log.debug "Power state: $powerState"
                handleEvent([name: "powerStatus", value: powerState], description)
                
            } else if (map.clusterInt == 0x0001 && map.attrInt == 0x0020) {
                def batteryVoltage = Integer.parseInt(map.value, 16) / 10.0
                log.debug "Battery voltage: ${batteryVoltage}V"
                def batteryLevel = ((batteryVoltage - 2.1) / (3.0 - 2.1)) * 100
                batteryLevel = Math.round(batteryLevel)    
                batteryLevel = batteryLevel > 100 ? 100 : batteryLevel < 0 ? 0 : batteryLevel
                log.debug "Battery level: ${batteryLevel}%"
                handleEvent([name: "battery", value: batteryLevel, unit: "%"], description)
            } else if (map.clusterInt == 0x0402 && map.attrInt == 0x0000) {
                def temperature = Integer.parseInt(map.value, 16) / 100.0
                if (debugLogging) log.debug "Temperature: ${temperature}°C"
                handleEvent([name: "temperature", value: temperature, unit: "°C"], description)
            }
        }
    }
}

def installed() {
    if (debugLogging) log.debug "Installed"
    configure()
}

def updated() {
    if (debugLogging) log.debug "Updated"
    configure()
}

def configure() {
    if (debugLogging) log.debug "Configuring"
    def configCmds = []
    if (device.hasCapability("Battery")) {
        configCmds += zigbee.configureReporting(0x0001, 0x0020, 0x20, 30, 21600, 0x01)
        configCmds += zigbee.readAttribute(0x0001, 0x0020)
    }
    if (device.hasCapability("Tamper Alert")) {
        configCmds += zigbee.configureReporting(0x0500, 0x0002, 0x18, 10, 600, null)
        configCmds += zigbee.readAttribute(0x0500, 0x0002)
    }
    if (device.hasCapability("Temperature Measurement")) {
        configCmds += zigbee.configureReporting(0x0402, 0x0000, 0x29, 30, 3600, 0x10)
        configCmds += zigbee.readAttribute(0x0402, 0x0000)
    }
    configCmds += zigbee.enrollResponse()
    return configCmds
}

def refresh() {
    if (debugLogging) log.debug "Refreshing"
    def refreshCmds = []
    if (device.hasCapability("Battery")) {
        refreshCmds += zigbee.readAttribute(0x0001, 0x0020)
    }
    if (device.hasCapability("Tamper Alert")) {
        refreshCmds += zigbee.readAttribute(0x0500, 0x0002)
    }
    if (device.hasCapability("Temperature Measurement")) {
        refreshCmds += zigbee.readAttribute(0x0402, 0x0000)
    }
    return refreshCmds
}

def handleEvent(event, description) {
    if (event.name == "battery" || event.name == "batteryVoltage") {
        if (debugLogging) log.debug "Running custom routine for battery event"
        def map = zigbee.parseDescriptionAsMap(description)
        def batteryVoltage = Integer.parseInt(map.value, 16) / 10.0
        log.debug "Battery voltage: ${batteryVoltage}V"
        def batteryLevel = ((batteryVoltage - 2.1) / (3.0 - 2.1)) * 100
        batteryLevel = Math.round(batteryLevel)    
        batteryLevel = batteryLevel > 100 ? 100 : batteryLevel < 0 ? 0 : batteryLevel
        log.debug "Battery level: ${batteryLevel}%"
        sendEvent(name: "battery", value: batteryLevel, unit: "%")
    } else if (event.name == "tamper") {
        if (debugLogging) log.debug "Tamper status: ${event.value}"
        sendEvent(event)
    } else if (event.name == "temperature") {
        if (debugLogging) log.debug "Temperature: ${event.value}°C"
        sendEvent(event)
    } else if (event.name == "powerStatus") {
        if (debugLogging) log.debug "Power state: ${event.value}"
        sendEvent(event)
    } else {
        def map = zigbee.parseDescriptionAsMap(description)
        if (map.clusterInt == 0x0500 && map.attrInt == 0x0002) {
            def tamperState = map.value == "01" ? "detected" : "clear"
            if (debugLogging) log.debug "Tamper state: $tamperState"
            sendEvent(name: "tamper", value: tamperState)
        }
        sendEvent(event)
    }
}
